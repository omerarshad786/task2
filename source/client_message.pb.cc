// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto

#include "client_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sockets {
PROTOBUF_CONSTEXPR client_msg::client_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.operation_)*/0
  , /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.success_)*/0} {}
struct client_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR client_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~client_msgDefaultTypeInternal() {}
  union {
    client_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 client_msgDefaultTypeInternal _client_msg_default_instance_;
}  // namespace sockets
static ::_pb::Metadata file_level_metadata_client_5fmessage_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_client_5fmessage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_client_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_client_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_.source_type_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::sockets::client_msg, _impl_.success_),
  2,
  0,
  3,
  1,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::sockets::client_msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sockets::_client_msg_default_instance_._instance,
};

const char descriptor_table_protodef_client_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024client_message.proto\022\007sockets\"\265\001\n\nclie"
  "nt_msg\0224\n\toperation\030\001 \001(\0162!.sockets.clie"
  "nt_msg.OperationType\022\023\n\013source_type\030\002 \001("
  "\t\022\013\n\003key\030\003 \001(\005\022\r\n\005value\030\004 \001(\t\022\014\n\004port\030\005 "
  "\001(\005\022\017\n\007success\030\006 \001(\005\"!\n\rOperationType\022\007\n"
  "\003PUT\020\000\022\007\n\003GET\020\001"
  ;
static ::_pbi::once_flag descriptor_table_client_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_client_5fmessage_2eproto = {
    false, false, 215, descriptor_table_protodef_client_5fmessage_2eproto,
    "client_message.proto",
    &descriptor_table_client_5fmessage_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_client_5fmessage_2eproto::offsets,
    file_level_metadata_client_5fmessage_2eproto, file_level_enum_descriptors_client_5fmessage_2eproto,
    file_level_service_descriptors_client_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_client_5fmessage_2eproto_getter() {
  return &descriptor_table_client_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_client_5fmessage_2eproto(&descriptor_table_client_5fmessage_2eproto);
namespace sockets {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* client_msg_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fmessage_2eproto);
  return file_level_enum_descriptors_client_5fmessage_2eproto[0];
}
bool client_msg_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr client_msg_OperationType client_msg::PUT;
constexpr client_msg_OperationType client_msg::GET;
constexpr client_msg_OperationType client_msg::OperationType_MIN;
constexpr client_msg_OperationType client_msg::OperationType_MAX;
constexpr int client_msg::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class client_msg::_Internal {
 public:
  using HasBits = decltype(std::declval<client_msg>()._impl_._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

client_msg::client_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sockets.client_msg)
}
client_msg::client_msg(const client_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  client_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.operation_){}
    , decltype(_impl_.key_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_type()) {
    _this->_impl_.source_type_.Set(from._internal_source_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.operation_, &from._impl_.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:sockets.client_msg)
}

inline void client_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_type_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.operation_){0}
    , decltype(_impl_.key_){0}
    , decltype(_impl_.port_){0}
    , decltype(_impl_.success_){0}
  };
  _impl_.source_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_msg::~client_msg() {
  // @@protoc_insertion_point(destructor:sockets.client_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void client_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_type_.Destroy();
  _impl_.value_.Destroy();
}

void client_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void client_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sockets.client_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.operation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.success_) -
        reinterpret_cast<char*>(&_impl_.operation_)) + sizeof(_impl_.success_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sockets.client_msg.OperationType operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sockets::client_msg_OperationType_IsValid(val))) {
            _internal_set_operation(static_cast<::sockets::client_msg_OperationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string source_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sockets.client_msg.source_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_key(&has_bits);
          _impl_.key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "sockets.client_msg.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_port(&has_bits);
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 success = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sockets.client_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .sockets.client_msg.OperationType operation = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional string source_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_type().data(), static_cast<int>(this->_internal_source_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sockets.client_msg.source_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_type(), target);
  }

  // optional int32 key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_key(), target);
  }

  // optional string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sockets.client_msg.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // optional int32 port = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_port(), target);
  }

  // optional int32 success = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sockets.client_msg)
  return target;
}

size_t client_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sockets.client_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string source_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_type());
    }

    // optional string value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .sockets.client_msg.OperationType operation = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

    // optional int32 key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key());
    }

    // optional int32 port = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
    }

    // optional int32 success = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_success());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    client_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_msg::GetClassData() const { return &_class_data_; }


void client_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<client_msg*>(&to_msg);
  auto& from = static_cast<const client_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sockets.client_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_type(from._internal_source_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_msg::CopyFrom(const client_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sockets.client_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_msg::IsInitialized() const {
  return true;
}

void client_msg::InternalSwap(client_msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_type_, lhs_arena,
      &other->_impl_.source_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(client_msg, _impl_.success_)
      + sizeof(client_msg::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(client_msg, _impl_.operation_)>(
          reinterpret_cast<char*>(&_impl_.operation_),
          reinterpret_cast<char*>(&other->_impl_.operation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata client_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sockets
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sockets::client_msg*
Arena::CreateMaybeMessage< ::sockets::client_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sockets::client_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
